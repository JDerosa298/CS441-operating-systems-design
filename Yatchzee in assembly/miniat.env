#
# Source this script for useful miniat shortcuts, ie type "source miniat.env"
# After that, type mhelp for help output.
#

MTOP=`pwd`
MCACHE=$TOP/cache
MOUT=$MTOP/out
MEXE=$MOUT/exe
MBIN=$MOUT/bin
MLIB=$MOUT/bin
MPYTHON=$MOUT/python/vm

uname=`uname -s`

if [[ "$uname" == *"Linux"* ]]; then
  MOS="LINUX"
elif [[ "$uname" == *"Darwin"* ]]; then
  MOS="DARWIN"
fi

if [[ "$PYTHONPATH" != *"$MPYTHON"* ]]; then
  export PYTHONPATH="$MPYTHON:$PYTHONPATH"
fi

if [ "$MOS" == "LINUX" ]; then
  if [[ "$LD_LIBRARY_PATH" != *"$MLIB"* ]]; then
    export LD_LIBRARY_PATH="$MLIB:$LD_LIBRARY_PATH"
  fi
elif [ "$MOS" == "DARWIN" ]; then
  if [[ "$DYLD_LIBRARY_PATH" != *"$MLIB"* ]]; then
    export DYLD_LIBRARY_PATH="$MLIB:$DYLD_LIBRARY_PATH"
  fi
fi

unset uname

mroot() {
  cd "$MTOP"
}

mhelp() {
  echo "mroot: Switch to the root of the miniat checkout"
  echo "mtest: Run the unit tests."
  echo "mconsole: Run the simple terminal. Arg1 can be a cache file"
  echo "mcolorconsole: Run the color console demo. Arg1 can be a cache file"
  echo "mpyconsole: Run the python simple terminal. Arg1 can be a cache file"
}

mtest() {
  local test_exe=$MEXE/miniat_tests
  if [ ! -f $test_exe ]; then
    echo 'miniat_tests not found, try building first'
    return 1
  fi
  $test_exe
  return $?
}

mconsole() {
  local console_exe=$MEXE/miniat_console
  local bin_file=$MBIN/simple_term.bin

  if [ ! -f $console_exe ]; then
    echo "Console executable \"$console_exe\" not found! Try building, type \"scons\""
    return 1
  fi

  if [ ! -f $bin_file ]; then
    echo "Simple terminal binary \"$bin_file\" not found! Try building, type \"scons\""
    return 1
  fi

  $console_exe $bin_file $1
  return $?
}

mcolorconsole() {
  local console_exe=$MEXE/miniat_color_console
  local bin_file=$MBIN/color_console_demo.bin

  if [ ! -f $console_exe ]; then
    echo "Console executable \"$console_exe\" not found! Try building, type \"scons\""
    return 1
  fi

  if [ ! -f $bin_file ]; then
    echo "Simple terminal binary \"$bin_file\" not found! Try building, type \"scons\""
    return 1
  fi

  $console_exe $bin_file $1
  return $?
}

mpyconsole() {
  local console_exe=$MOUT/python/console/console.py
  local bin_file=$MBIN/simple_term.bin

  if [ -n "$1" ]; then
    local cache_arg="--cache-file=$1"
  fi

  if [ ! -f $console_exe ]; then
    echo "Console executable \"$console_exe\" not found! Try building, type \"scons buildmod=python\"."
    return 1
  fi

  if [ ! -f $bin_file ]; then
    echo "Simple terminal binary \"$bin_file\" not found! Try building type, \"scons buildmod=python\"."
    return 1
  fi

  # Python requires loading .so? This hack makes it work on Mac.
  if [ "$MOS" == "DARWIN" -a ! -L "$MPYTHON/_miniat.so" ]; then
    ln -s $MPYTHON/_miniat.dylib $MPYTHON/_miniat.so
  fi

  $console_exe $cache_arg $bin_file
  return $?
}
